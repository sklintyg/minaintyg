subprojects {
    configurations {
        buildtools
    }

    dependencies {
        buildtools "se.inera.intyg.common:common-build-tools:${commonVersion}"
    }

    task unzipBuildTools(type: Copy) {
        into "$buildDir/build-tools/"
        from {
            configurations.buildtools.collect { zipTree(it) }
        }
    }

    // Checkstyle ===========================================================

    apply plugin: 'checkstyle'

    checkstyle {
        config = resources.text.fromFile("${buildDir}/build-tools/checkstyle/checkstyle.xml")
        configProperties = ['package_name': 'minaintyg']
        ignoreFailures = false
        showViolations = true
    }

    checkstyleMain.onlyIf { project.hasProperty('codeQuality') }
    checkstyleMain.dependsOn unzipBuildTools
    checkstyleMain.source = "src/main/java"
    checkstyleTest.enabled = false

    // PMD ==================================================================

    apply plugin: 'pmd'

    pmd {
        ignoreFailures = false
        ruleSetFiles = rootProject.files("${buildDir}/build-tools/pmd/pmdRuleSet.xml")
        ruleSets = []
        sourceSets = [ sourceSets.main ]
    }

    pmdMain.onlyIf { project.hasProperty('codeQuality') }
    pmdTest.enabled = false

    // Errorprone ===========================================================

    apply plugin: 'net.ltgt.errorprone-base'

    // This makes sure only production code (not tests) is checked
    if (project.hasProperty('codeQuality')) {
        compileJava {
            toolChain net.ltgt.gradle.errorprone.ErrorProneToolChain.create(project)
            options.compilerArgs += [ '-Xep:TypeParameterUnusedInFormals:ERROR', '-Xep:MissingOverride:ERROR', '-Xep:DefaultCharset:ERROR',
                                      '-Xep:ClassCanBeStatic:ERROR', '-Xep:Finally:ERROR' ]
        }
    }

    // Jacoco ===============================================================

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.7.6.201602180812"
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    apply plugin: 'com.github.hierynomus.license'

    // License ==============================================================

    license {
        ext.project_name = "sklintyg"
        ext.project_url = "https://github.com/sklintyg"
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        header file("${buildDir}/build-tools/license/header.txt")
        mapping("java","SLASHSTAR_STYLE")
        include "**/*.java"
    }

    licenseFormatMain.dependsOn unzipBuildTools
    licenseFormatTest.dependsOn unzipBuildTools

    licenseMain.onlyIf { project.hasProperty('codeQuality') }
    licenseTest.onlyIf { project.hasProperty('codeQuality') }
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
        property "sonar.projectName", "Mina intyg"
        property "sonar.projectKey", "mina-intyg"
        property "sonar.host.url", System.properties['sonarUrl'] ?: "https://build-inera.nordicmedtest.se/sonar"
        property "sonar.test.exclusions", "src/test/**"
        property "sonar.exclusions", ["**/stub/**", "**/testability/**", "**/exception/**", "**/*Exception*.java", "**/templates.js", "**/vendor/**"]
        property "sonar.javascript.lcov.reportPath", "build/karma/lcov.info"
    }
}

// This buildscript block should not be required, since we have one in build.gradle, but for some reason errorprone
// only works if the block is present in this file as well.
buildscript {
    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
}
