import org.apache.commons.codec.digest.DigestUtils

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'

def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'
def resourcesName = 'resources.zip'
def resourcesDestinationDir = '../devops/openshift/test/env'

grunt {
    colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
}

node {
    version = '10.10.0'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = projectDir
    nodeModulesDir = projectDir
}

task jsTests(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test', "--outputDir=${webappTestOutputDir}", '--run-coverage=' + (project.findProperty('codeCoverage') != null ? 'true' : '') ]
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

war.dependsOn(jsInclude)

task unzipBuildTools(type: Copy) {
    into "$buildDir/build-tools/"
    from {
        def intygJar = project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") }
        zipTree(intygJar)
    }
}

task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
    outputs.upToDateWhen { false }

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['lint']
}

checkstyleMain.dependsOn jsCodeQuality
jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

task zipResources(type: Zip) {
    from '../src/main/resources'
    include '*'
    include '*/*' //to include contents of a folder present inside target directory
    archiveName resourcesName
    destinationDir(file(resourcesDestinationDir))
}

task zipGenerateChecksum {
    dependsOn zipResources

    doLast {
        boolean isUpToDate = false;
        String resourcesPath = resourcesDestinationDir + '/' + resourcesName

        File destFile = file(resourcesPath)

        if(destFile.exists()) {
            String checksum = "";
            destFile.withInputStream { ins ->
                checksum = DigestUtils.md5Hex(ins)
            }

            File destFileMd5 = new File(destFile.absolutePath + ".md5")
            if(destFileMd5.exists()) {
                if(destFileMd5.text == checksum) {
                    isUpToDate = true;
                }
            }

            if (isUpToDate) {
                println 'the resources archieve is unchanged, no need to update the repository'
                exec {
                    // Reverse with Git commands
                    commandLine 'git', 'checkout', '--', resourcesPath
                }
            } else {
                println 'the resources archieve has been changed, you need to update the repository with the latest version'
                destFileMd5.newWriter().withWriter { w ->
                    w << checksum
                }
            }
        }
    }
}

build.dependsOn zipGenerateChecksum

war {
    from("${buildDir}/apps")

    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8088/"
    systemProperty "integration.tests.certificate.baseUrl", System.properties['certificate.baseUrl'] ?: "http://localhost:8080/"
    include '**/*IT*'
}

gretty {
    contextPath = '/'
    contextConfigFile = file("src/main/webapp/WEB-INF/jetty-context.xml")
    integrationTestTask = null
    scanInterval = 0
    httpPort = 8088
    debugPort = 5006
    debugSuspend = false

    def minified = System.properties['useMinifiedJavaScript'] ?: false

    // Normal settings
    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
               "-Dspring.profiles.active=dev,caching-enabled",
               "-Dresources.folder=${projectDir}/../src/main/resources",
               "-Djetty.port=8088",
               "-Dcredentials.file=${projectDir}/minaintyg-credentials.properties",
               "-Dconfig.file=${projectDir}/minaintyg-dev.properties",
               "-Dlogback.file=${projectDir}/minaintyg-logback.xml",
               "-DuseMinifiedJavaScript=${minified}"]

    // SAML test settings for local testing
//    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
//               "-Dspring.profiles.active=test,wc-pu-stub,mi-security-test",
//               "-Dconfig.dir=/Users/username/intyg/minaintyg-konfiguration/test",
//               "-Dminaintyg.resources.folder=${projectDir}/../src/main/resources",
//               "-Djetty.port=8088",
//               "-Dminaintyg.stubs.port=8088",
//               "-Dminaintyg.credentials.file=/Users/username/intyg/minaintyg-konfiguration/test/credentials.properties",
//               "-Dminaintyg.config.file=/Users/username/intyg/minaintyg-konfiguration/test/minaintyg.properties",
//               "-Dminaintyg.logback.file=/Users/username/intyg/minaintyg-konfiguration/test/minaintyg-logback.xml",
//               "-Dminaintyg.useMinifiedJavaScript=${minified}"]

    extraResourceBase webappOutputDir
}

war.dependsOn createVersionPropertyFile

dependencies {
    compile "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"

    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"
    compile "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"

    compile "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    compile "se.inera.intyg.infra:pu-integration:${infraVersion}"
    compile "se.inera.intyg.infra:monitoring:${infraVersion}"
    compile "se.inera.intyg.infra:security-filter:${infraVersion}"

    compile "se.inera.intyg.common:ts-bas:${commonVersion}"
    compile "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    compile "se.inera.intyg.common:luse:${commonVersion}"
    compile "se.inera.intyg.common:lisjp:${commonVersion}"
    compile "se.inera.intyg.common:luae_na:${commonVersion}"
    compile "se.inera.intyg.common:luae_fs:${commonVersion}"
    compile "se.inera.intyg.common:fk7263:${commonVersion}"
    compile "se.inera.intyg.common:af00213:${commonVersion}"
    compile "se.inera.intyg.common:ag114:${commonVersion}"

    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"

    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySaml2CoreVersion}"
    compile "org.springframework.session:spring-session:${springSessionVersion}"
    compile "org.opensaml:openws:${openWsVersion}"
    compile "org.aspectj:aspectjweaver:${aspectJWeaverVersion}"
    compile "org.owasp.esapi:esapi:${esapiVersion}"
    compile "org.opensaml:xmltooling:${xmlToolingVersion}"
    compile("io.swagger:swagger-jaxrs:${jaxrsVersion}") {
        exclude(module: "jsr311-api")
    }

    testCompile "com.jayway.restassured:rest-assured:${restassuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${jsonSchemaValidatorVersion}"

    compileOnly "javax.servlet:servlet-api:${servletApiVersion}"
    compileOnly "org.eclipse.jetty:apache-jstl:${apacheJstlVersion}"
}
