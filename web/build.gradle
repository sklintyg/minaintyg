apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'

def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'

grunt {
    colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
}

node {
    version = '6.6.0'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = projectDir
    nodeModulesDir = projectDir
}

task jsTests(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test', "--outputDir=${webappTestOutputDir}", '--run-coverage=' + (project.findProperty('codeCoverage') != null ? 'true' : '') ]
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

war.dependsOn(jsInclude)

task unzipBuildTools(type: Copy) {
    into "$buildDir/build-tools/"
    from {
        def intygJar = project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") }
        zipTree(intygJar)
    }
}

task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
    outputs.upToDateWhen { false }

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['lint']
}

checkstyleMain.dependsOn jsCodeQuality
jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

war {
    from("${buildDir}/apps")

    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8088/"
    systemProperty "integration.tests.certificate.baseUrl", System.properties['certificate.baseUrl'] ?: "http://localhost:8080/inera-certificate/"
    include '**/*IT*'
}

gretty {
    integrationTestTask = null
    contextPath = '/'
    httpPort = 8088
    scanInterval = 0
    debugSuspend = false

    contextConfigFile = file("src/main/webapp/WEB-INF/jetty-context.xml")

    def minified = System.properties['minaintyg.useMinifiedJavaScript'] ?: false

    // Normal settings
    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
               "-Dspring.profiles.active=dev",
               "-Dminaintyg.resources.folder=${projectDir}/../src/main/resources",
               "-Djetty.port=8088",
               "-Dminaintyg.credentials.file=${projectDir}/minaintyg-credentials.properties",
               "-Dminaintyg.config.file=${projectDir}/minaintyg-dev.properties",
               "-Dminaintyg.logback.file=${projectDir}/minaintyg-logback.xml",
               "-Dminaintyg.useMinifiedJavaScript=${minified}"]

    // SAML test settings for local testing
//    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
//               "-Dspring.profiles.active=test,wc-pu-stub",
//               "-Dconfig.dir=/Users/eriklupander/intyg/minaintyg-konfiguration/test",
//               "-Dminaintyg.resources.folder=${projectDir}/../src/main/resources",
//               "-Djetty.port=8088",
//               "-Dminaintyg.stubs.port=8088",
//               "-Dminaintyg.credentials.file=/Users/eriklupander/intyg/minaintyg-konfiguration/test/credentials.properties",
//               "-Dminaintyg.config.file=/Users/eriklupander/intyg/minaintyg-konfiguration/test/minaintyg.properties",
//               "-Dminaintyg.logback.file=/Users/eriklupander/intyg/minaintyg-konfiguration/test/minaintyg-logback.xml",
//               "-Dminaintyg.useMinifiedJavaScript=${minified}"]

    extraResourceBase webappOutputDir
}

war.dependsOn createVersionPropertyFile

dependencies {
    compile "se.inera.intyg.insuranceprocess.healthreporting:intyg-insuranceprocess-healthreporting-schemas:${intygInsuranceprocessSchemasVersion}"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    compile "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"

    compile "se.inera.intyg.common:ts-bas:${commonVersion}"
    compile "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    compile "se.inera.intyg.common:luse:${commonVersion}"
    compile "se.inera.intyg.common:lisjp:${commonVersion}"
    compile "se.inera.intyg.common:luae_na:${commonVersion}"
    compile "se.inera.intyg.common:luae_fs:${commonVersion}"
    compile "se.inera.intyg.common:fk7263:${commonVersion}"

    compile "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    compile "se.inera.intyg.infra:pu-integration:${infraVersion}"

    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"

    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySaml2CoreVersion}"
    compile "org.opensaml:openws:${openWsVersion}"
    compile "org.aspectj:aspectjweaver:${aspectJWeaverVersion}"
    compile "org.owasp.esapi:esapi:${esapiVersion}"
    compile "org.opensaml:xmltooling:${xmlToolingVersion}"
    compile("io.swagger:swagger-jaxrs:${jaxrsVersion}") {
        exclude(module: "jsr311-api")
    }

    testCompile "com.jayway.restassured:rest-assured:${restassuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${jsonSchemaValidatorVersion}"

    compileOnly "javax.servlet:servlet-api:${servletApiVersion}"
    compileOnly "org.eclipse.jetty:apache-jstl:${apacheJstlVersion}"
}
