description = 'Mina intyg (Web)'

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'

def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'

grunt {
    colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
}

node {
    version = '6.6.0'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = projectDir
    nodeModulesDir = projectDir
}

task jsTests(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test', "--outputDir=${webappTestOutputDir}", '--run-coverage=' + (project.findProperty('codeCoverage') != null ? 'true' : '') ]
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

war.dependsOn(jsInclude)

task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall]) {
    outputs.upToDateWhen { false }

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['lint']
}

checkstyleMain.dependsOn(jsCodeQuality)
jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

war {
    from("${buildDir}/apps")

    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

gretty {
    contextPath = '/'
    httpPort = 8088
    scanInterval = 0

    contextConfigFile = file("src/main/webapp/WEB-INF/jetty-context.xml")

    def minified = System.properties['minaintyg.useMinifiedJavaScript'] ?: false

    jvmArgs = [
        "-Dcatalina.base=${buildDir}/catalina.base",
        "-Dspring.profiles.active=dev",
        "-Dminaintyg.resources.folder=${projectDir}/../src/main/resources",
        "-Djetty.port=8088",
        "-Dcredentials.file=${projectDir}/minaintyg-credentials.properties",
        "-Dminaintyg.config.file=${projectDir}/minaintyg-dev.properties",
        "-Dminaintyg.logback.file=${projectDir}/minaintyg-logback.xml",
        "-Dminaintyg.useMinifiedJavaScript=${minified}"
        ]

    extraResourceBase webappOutputDir
}

war.dependsOn createVersionPropertyFile

configurations {
    buildtools
}

dependencies {
    buildtools "se.inera.intyg.common:common-build-tools:${commonVersion}"

    compile "se.inera.intyg.insuranceprocess.healthreporting:intyg-insuranceprocess-healthreporting-schemas:${intygInsuranceprocessSchemasVersion}"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    compile "se.inera.intyg.intygstyper:ts-bas:${typerVersion}"
    compile "se.inera.intyg.intygstyper:ts-diabetes:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luse:${typerVersion}"
    compile "se.inera.intyg.intygstyper:lisjp:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luae_na:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luae_fs:${typerVersion}"
    compile "se.inera.intyg.intygstyper:fk7263:${typerVersion}"

    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"

    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySaml2CoreVersion}"
    compile "org.opensaml:openws:${openWsVersion}"
    compile "org.aspectj:aspectjweaver:${aspectJWeaverVersion}"
    compile "org.owasp.esapi:esapi:${esapiVersion}"
    compile "org.opensaml:xmltooling:${xmlToolingVersion}"
    compile "org.callistasoftware.netcare.commons:mvk-integration:${mvkIntegrationVersion}"
    compile("io.swagger:swagger-jaxrs:${jaxrsVersion}") {
        exclude(module: "jsr311-api")
    }

    compileOnly "javax.servlet:servlet-api:${servletApiVersion}"
    compileOnly "org.eclipse.jetty:apache-jstl:${apacheJstlVersion}"
}
