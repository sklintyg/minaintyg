apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'nebula.grunt'
apply plugin: 'idea'

def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'

idea {
    module {
        excludeDirs += file('node_modules')
    }
}

grunt {
    colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
}

task jsTests(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.testRuntimeClasspath)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test', "--outputDir=${webappTestOutputDir}", '--run-coverage=' + (project.findProperty('codeCoverage') != null ? 'true' : '') ]
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.runtimeClasspath)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

war.dependsOn(jsInclude)

task unzipBuildTools(type: Copy) {
    into "$buildDir/build-tools/"
    from {
        def intygJar = project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") }
        zipTree(intygJar)
    }
}

task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
    outputs.upToDateWhen { false }

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['lint']
}

checkstyleMain.dependsOn jsCodeQuality
jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

war {
    from("${buildDir}/apps")

    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

test {
    exclude '**/*IT*'
}

compileTestJava.dependsOn('createVersionPropertyFile')

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8040/"
    systemProperty "integration.tests.certificate.baseUrl", System.properties['certificate.baseUrl'] ?: "http://localhost:8080/"
    include '**/*IT*'
}

gretty {
    def minified = System.properties['useMinifiedJavaScript'] ?: false
    def instance = System.properties['instance'] ?: '0'
    def useHttpPort = 8040 + (instance as Integer)
    def useInternalHttpPort = 8140 + (instance as Integer)
    def applicationDir = "${rootProject.projectDir}/devops/dev"

    servletContainer = 'tomcat9'
    contextPath = '/'
    integrationTestTask = null
    scanInterval = 0
    debugPort = 8840 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    debugSuspend = false
    inplaceMode = 'hard'
    serverConfigFile = "tomcat-gretty.xml"


    // Normal settings
    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
               "-Dspring.profiles.active=dev,caching-enabled,ia-stub,mi-security-test",
               "-Dlogback.file=${applicationDir}/config/logback-dev.xml",
               "-Djava.awt.headless=true",
               "-Dfile.encoding=UTF-8",
               "-Dapplication.dir=${applicationDir}",
               "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
               "-DuseMinifiedJavaScript=${minified}",
               "-Ddev.http.port=${useHttpPort}",
               "-Ddev.http.port.internal=${useInternalHttpPort}",
               "-Dxml.catalog.cacheEnabled=false"
    ]

    extraResourceBase webappOutputDir
}

war.dependsOn createVersionPropertyFile

dependencies {
    implementation "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"

    implementation "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"
    implementation "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"

    implementation "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    implementation "se.inera.intyg.infra:pu-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:monitoring:${infraVersion}"
    implementation "se.inera.intyg.infra:security-filter:${infraVersion}"
    implementation "se.inera.intyg.infra:security-common:${infraVersion}"
    implementation "se.inera.intyg.infra:ia-integration:${infraVersion}"

    implementation "se.inera.intyg.common:ts-bas:${commonVersion}"
    implementation "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    implementation "se.inera.intyg.common:tstrk1009:${commonVersion}"
    implementation "se.inera.intyg.common:tstrk1062:${commonVersion}"
    implementation "se.inera.intyg.common:luse:${commonVersion}"
    implementation "se.inera.intyg.common:lisjp:${commonVersion}"
    implementation "se.inera.intyg.common:luae_na:${commonVersion}"
    implementation "se.inera.intyg.common:luae_fs:${commonVersion}"
    implementation "se.inera.intyg.common:fk7263:${commonVersion}"
    implementation "se.inera.intyg.common:af00213:${commonVersion}"
    implementation "se.inera.intyg.common:af00251:${commonVersion}"
    implementation "se.inera.intyg.common:ag114:${commonVersion}"
    implementation "se.inera.intyg.common:ag7804:${commonVersion}"

    implementation "org.springframework:spring-web"
    implementation "org.springframework:spring-webmvc"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security:spring-security-taglibs"
    implementation "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySaml2CoreVersion}"
    implementation "org.springframework.session:spring-session-data-redis"

    implementation "org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}"
    implementation "org.aspectj:aspectjweaver"
    implementation "org.owasp.esapi:esapi:${esapiVersion}"
    implementation "org.opensaml:openws:${openWsVersion}"
    implementation "org.opensaml:xmltooling:${xmlToolingVersion}"

    implementation "net.javacrumbs.shedlock:shedlock-spring:${shedlockSpringVersion}"
    implementation "net.javacrumbs.shedlock:shedlock-provider-redis-spring:${shedlockSpringVersion}"

    implementation("io.swagger:swagger-jaxrs:${swaggerJaxrsVersion}") {
        exclude(module: "jsr311-api")
    }

    implementation "com.sun.xml.messaging.saaj:saaj-impl"
    implementation "com.sun.activation:jakarta.activation"
    implementation "org.glassfish.jaxb:jaxb-runtime"

    compileOnly "jakarta.servlet:jakarta.servlet-api"
    compileOnly "org.eclipse.jetty:apache-jstl"

    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.rest-assured:json-schema-validator"
    testImplementation "org.springframework:spring-test"

    grettyRunnerTomcat9 "org.eclipse.jetty:apache-jstl"
    grettyRunnerTomcat9 "se.inera.intyg.refdata:refdata:${refDataVersion}"
}
