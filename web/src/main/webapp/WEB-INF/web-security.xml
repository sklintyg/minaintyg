<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2016 Inera AB (http://www.inera.se)
  ~
  ~ This file is part of sklintyg (https://github.com/sklintyg).
  ~
  ~ sklintyg is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ sklintyg is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security" xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

  <aop:aspectj-autoproxy />

  <beans profile="dev, test, qa">
    <!-- Note:  In dev and test profile there is an AOP Advice that shortcuts the 
        org.callistasoftware.netcare.mvk.authentication.service.impl.MvkAuthenticationServiceImpl.authenticate call if the 
        guid parameter value matches the <fakeMatcherRegExp>. 
        If it matches the advice will return a successful Auth Result with the guid as id - if no match, the service will try the mvk 
        auth ws call as normal. So, use something like .../sso?guid=19900101-2122 to fake a login and otherwise a full mvk auth will 
        be executed -->
    <bean class="se.inera.intyg.minaintyg.web.web.security.MvkValidationServiceAdvice">
      <property name="fakeMatcherRegExp" value="[12]{1}[90]{1}[0-9]{6}-?[0-9]{4}" />
    </bean>
    <security:http security="none" pattern="/welcome.html" />
    <security:http security="none" pattern="/anvandare/consent/**"/>
    <security:http security="none" pattern="/services/**" />
  </beans>

  <beans profile="!dev">
    <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
      <constructor-arg>
        <list>
          <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
            <constructor-arg>
              <value type="java.io.File">${fk.saml.metadata.file}</value>
            </constructor-arg>
            <property name="parserPool" ref="parserPool"/>
          </bean>
        </list>
      </constructor-arg>
      <!--  OPTIONAL used when one of the metadata files contains information about this service provider -->
      <!-- <property name="hostedSPName" value=""/> -->
      <!--  OPTIONAL property: can tell the system which IDP should be used for authenticating user by default. -->
      <property name="defaultIDP" value="idpexternalfksat"/>
    </bean>

    <!-- Enable the FK SAML Auth filter for our FK entry point url -->
    <security:http pattern="/web/fksso/**"  authentication-manager-ref="samlAuthenticationManager" entry-point-ref="mvkEntryPoint">
      <security:csrf disabled="true"/>
      <security:custom-filter before="FIRST" ref="clearSecurityContextFilter" />
      <security:custom-filter after="FIRST" ref="metadataGeneratorFilter"/>
      <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
      <security:headers>
        <security:frame-options />
      </security:headers>
      <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy" />
    </security:http>
  </beans>

  <beans>
    <security:http pattern="/" entry-point-ref="mvkEntryPoint">
      <security:headers>
        <security:frame-options />
      </security:headers>
    </security:http>
    <security:http security="none" pattern="/favicon.ico" />
    <security:http security="none" pattern="/web/resources/**" />
    <security:http security="none" pattern="/appconfig/**" />
    <security:http pattern="/web/tillbaka-till-mvk" entry-point-ref="mvkEntryPoint">
      <security:headers>
        <security:frame-options />
      </security:headers>
    </security:http>
    <security:http pattern="/web/logga-ut" entry-point-ref="mvkEntryPoint">
      <security:headers>
        <security:frame-options />
      </security:headers>
    </security:http>
    <security:http pattern="/web/logga-ut-fk" entry-point-ref="mvkEntryPoint">
      <security:headers>
        <security:frame-options />
      </security:headers>
    </security:http>
    <security:http security="none" pattern="/ws/**" />
    <!-- Allow access to static client resources without being logged in -->
    <security:http security="none" pattern="/bower_components/**"/>
    <!-- Allow access to static client resources without being logged in.
    This should also solve the problem of font-files not beeing loaded in IE due to problems with certain cache-headers + https access.
    If an URI is under spring security, spring will add cache-headers, which we avoid by excluding everything under /font from Spring Security.
      see INTYG-3924, INTYG-3450 -->
    <security:http security="none" pattern="/font/**" />
    <!-- Allow access to webjars without being logged in -->
    <security:http pattern="/web/webjars/**" entry-point-ref="mvkEntryPoint">
      <security:csrf disabled="true"/>
      <security:headers>
        <security:frame-options />
      </security:headers>
    </security:http>
    
    <!-- Allow access to healthcheck and monitoring services without being logged in -->
    <security:http security="none" pattern="/monitoring/**" />
    <security:http security="none" pattern="/health-check/health-check.jsp" />

    <import resource="classpath*:/netcare-mvk-integration-config.xml" />
    <import resource="classpath*:/netcare-mvk-integration-security-config.xml" />
    <import resource="classpath*:/mvk-validatetoken-cxf-config.xml" />

    <import resource="classpath*:/fk-saml-config.xml" />

    <security:authentication-manager>
      <security:authentication-provider ref="preAuthAuthProvider" />
    </security:authentication-manager>

    <!-- Enable the MVK Auth filter for our mvk entry point url -->
    <!-- We always clear the context before logging in -->
    <security:http pattern="/web/sso**" entry-point-ref="mvkEntryPoint">
      <security:csrf disabled="true"/>
      <security:custom-filter position="FIRST" ref="clearSecurityContextFilter" />
      <security:custom-filter position="PRE_AUTH_FILTER" ref="mvkPreAuthFilter" />
      <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy" />
      <security:headers>
        <security:frame-options />
      </security:headers>
    </security:http>

    <!-- set up protection of the needed url's in the app-->
    <!-- prevent caching on /api and /moduleapi -->
    <security:http pattern="/api/**" use-expressions="true" entry-point-ref="mvkEntryPoint">
      <security:csrf disabled="true"/>
      <security:intercept-url pattern="/api/**" access="hasRole('ROLE_CITIZEN')" />
      <security:headers>
        <security:frame-options />
        <security:cache-control />
      </security:headers>
    </security:http>
    <security:http pattern="/moduleapi/**" use-expressions="true" entry-point-ref="mvkEntryPoint">
      <security:csrf disabled="true"/>
      <security:intercept-url pattern="/moduleapi/**" access="hasRole('ROLE_CITIZEN')" />
      <security:headers>
        <security:frame-options />
        <security:cache-control />
      </security:headers>
    </security:http>
    <security:http use-expressions="true" entry-point-ref="mvkEntryPoint">
      <security:csrf disabled="true"/>
      <security:intercept-url pattern="/web/**" access="hasRole('ROLE_CITIZEN')" />
      <security:logout logout-url="/web/logout" logout-success-url="/web/start?reason=logout" />
      <security:headers>
        <security:frame-options />
      </security:headers>
    </security:http>

    <!-- Filter that resets the security context -->
    <bean id="clearSecurityContextFilter" class="se.inera.intyg.minaintyg.web.web.security.ClearSecurityContextFilter">
      <property name="handler" ref="securityContextLogoutHandler" />
    </bean>

    <!--  Reuse of springs "logout" handler that clear the context -->
    <bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />

    <!-- SessionRegistry is needed for keeping track of authenticated sessions (i.e users) -->
    <bean id="sessionRegistry" class="se.inera.intyg.minaintyg.web.web.security.LoggingSessionRegistryImpl" />

    <!-- Session authentication strategy that registers authenticated sessions with the session registry -->
    <bean id="registerSessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
      <constructor-arg ref="sessionRegistry" />
    </bean>

  </beans>

</beans>
