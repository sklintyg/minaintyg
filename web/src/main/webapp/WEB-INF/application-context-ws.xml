<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:cxf="http://cxf.apache.org/core" xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:sec="http://cxf.apache.org/configuration/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://cxf.apache.org/core
        http://cxf.apache.org/schemas/core.xsd
        http://cxf.apache.org/transports/http/configuration
        http://cxf.apache.org/schemas/configuration/http-conf.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
        http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd">

  <cxf:bus>
    <cxf:features>
      <cxf:logging/>
    </cxf:features>
  </cxf:bus>

  <!-- ws endpoints -->
  <jaxws:endpoint address="/list-certificates/v1.0"
                  implementor="se.inera.certificate.integration.ListCertificatesResponderImpl">
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/list-certificates-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>
  </jaxws:endpoint>

  <jaxws:endpoint address="/get-certificate/v1.0"
                  implementor="se.inera.certificate.integration.GetCertificateResponderImpl">
    <jaxws:properties>
      <entry key="jaxb.additionalContextClasses"
             value="#{certificatesContextClassCollector.certificateContextClasses}"/>
    </jaxws:properties>
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/get-certificate-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>

  </jaxws:endpoint>

  <jaxws:endpoint address="/get-certificate-content/v1.0"
                    implementor="se.inera.certificate.integration.GetCertificateContentResponderImpl">
      <jaxws:outFaultInterceptors>
        <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
          <constructor-arg value="transform/get-certificate-content-transform.xslt"/>
        </bean>
      </jaxws:outFaultInterceptors>

    </jaxws:endpoint>


  <jaxws:endpoint address="/register-certificate/v3.0"
                  implementor="se.inera.certificate.integration.RegisterMedicalCertificateResponderImpl">
    <jaxws:inInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.LakarutlatandeValidatingInterceptor"/>
    </jaxws:inInterceptors>
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/register-medical-certificate-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>
  </jaxws:endpoint>

  <jaxws:endpoint address="/set-certificate-status/v1.0"
                  implementor="se.inera.certificate.integration.SetCertificateStatusResponderImpl">
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/set-certificate-status-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>
  </jaxws:endpoint>

  <jaxws:endpoint address="/get-consent/v1.0" implementor="se.inera.certificate.integration.GetConsentResponderImpl">
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/get-consent-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>
  </jaxws:endpoint>

  <jaxws:endpoint address="/set-consent/v1.0" implementor="se.inera.certificate.integration.SetConsentResponderImpl">
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/set-consent-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>
  </jaxws:endpoint>

  <jaxws:endpoint address="/send-certificate/v1.0"
                  implementor="se.inera.certificate.integration.SendMedicalCertificateResponderImpl">
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/send-medical-certificate-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>
  </jaxws:endpoint>

  <jaxws:endpoint address="/revoke-certificate/v1.0"
                  implementor="se.inera.certificate.integration.RevokeMedicalCertificateResponderImpl">
    <jaxws:outFaultInterceptors>
      <bean class="se.inera.certificate.integration.interceptor.SoapFaultToSoapResponseTransformerInterceptor">
        <constructor-arg value="transform/revoke-medical-certificate-transform.xslt"/>
      </bean>
    </jaxws:outFaultInterceptors>
  </jaxws:endpoint>

  <jaxws:endpoint address="/registrera-intyg/v1.0">
    <jaxws:implementor>
        <ref bean="registreraIntygResponder"/>
    </jaxws:implementor>
  </jaxws:endpoint>
  <bean id="registreraIntygResponder" class="se.inera.certificate.integration.RegistreraIntygResponder"/>

  <!-- ws clients -->
  <jaxws:client id="registerMedicalCertificatesClient"
                serviceClass="se.inera.ifv.insuranceprocess.healthreporting.registermedicalcertificate.v3.rivtabp20.RegisterMedicalCertificateResponderInterface"
                address="${registermedicalcertificatev3.endpoint.url}">
  </jaxws:client>

  <jaxws:client id="sendMedicalCertificateQuestionClient"
                serviceClass="se.inera.ifv.insuranceprocess.healthreporting.sendmedicalcertificatequestion.v1.rivtabp20.SendMedicalCertificateQuestionResponderInterface"
                address="${sendmedicalcertificatequestionv1.endpoint.url}">
  </jaxws:client>

  <import resource="application-context-ws-stub.xml"/>

  <beans profile="qa,prod">
    <http:conduit name="{urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20}RegisterMedicalCertificateResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true" Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ws.key.manager.password}">
          <sec:keyStore file="${ws.certificate.file}" password="${ws.certificate.password}" type="${ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ws.truststore.file}" password="${ws.truststore.password}" type="${ws.truststore.type}" />
        </sec:trustManagers>
  
        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>

    <http:conduit name="{urn:riv:insuranceprocess:healthreporting:RevokeMedicalCertificateResponder:1:rivtabp20}RevokeMedicalCertificateResponderInterfacePort.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true" Connection="Keep-Alive" />
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ws.key.manager.password}">
          <sec:keyStore file="${ws.certificate.file}" password="${ws.certificate.password}" type="${ws.certificate.type}" />
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ws.truststore.file}" password="${ws.truststore.password}" type="${ws.truststore.type}" />
        </sec:trustManagers>
  
        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable or null encryption is used, but exclude anonymous Diffie-Hellman key change 
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
  </beans>

</beans>
