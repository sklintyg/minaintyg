plugins {
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.owasp.dependencycheck' version '10.0.4'
    id 'test-report-aggregation'
    id 'application'
}

ext {
    springbootMavenBomVersion = '3.3.4'
    shedlockSpringVersion = '5.10.2'

    ineraMavenRepository = 'https://nexus.drift.inera.se/repository/it-public/'
    shibbolethMavenRepository = 'https://build.shibboleth.net/nexus/content/repositories/releases/'
    nvdMirror = 'https://vulnz-nvd-mirror-devtest.intyg.nordicmedtest.se'
}

group = 'se.inera.intyg.minaintyg'
version = System.properties['buildVersion'] ?: '4.1.0-SNAPSHOT'
mainClassName = 'se.inera.intyg.minaintyg.MinaintygApplication'

allprojects {
    repositories {
        mavenLocal()
        maven { url "${ineraMavenRepository}" }
        maven { url "${shibbolethMavenRepository}" }
        mavenCentral()
    }
}

sonar {
    properties {
        property "sonar.projectKey", "intyg-minaintyg"
        property "sonar.projectName", "intyg-minaintyg"
        property "sonar.dependencyCheck.htmlReportPath", "${buildDir}/reports/dependency-check-report.html"
        property "sonar.dependencyCheck.jsonReportPath", "${buildDir}/reports/dependency-check-report.json"
    }
}

dependencyCheck {
    formats = List.of("HTML", "JSON")

    nvd {
        datafeedUrl="${nvdMirror}"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    sourceCompatibility = '17'
    targetCompatibility = '17'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/testability/**",
                        "**/integrationtest/**",
                ])
            }))
        }
    }

    sonar {
        properties {
            property "sonar.exclusions", "**/integration/api/**/*,**/testability/**,**/dto/**/*,**/integrationtest/**"
        }
    }
}

reporting {
    reports {
        integrationTestAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.INTEGRATION_TEST
        }
    }

    dependencies {
        testReportAggregation project(':app')
        testReportAggregation project(':integration-api')
        testReportAggregation project(':integration-intyg-proxy-service')
        testReportAggregation project(':integration-intygsadmin')
        testReportAggregation project(':integration-intygstjanst')
        testReportAggregation project(':integration-test')
        testReportAggregation project(':integration-webcert')
    }
}
