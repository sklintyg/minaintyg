<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright (C) 2013 Inera AB (http://www.inera.se)

  This file is part of Inera Certificate Web (http://code.google.com/p/inera-certificate-web).

  Inera Certificate Web is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  Inera Certificate Web is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security" xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

  <aop:aspectj-autoproxy />
  <beans profile="dev, test">
    <!-- Note:  In dev and test profile there is an AOP Advice that shortcuts the 
        org.callistasoftware.netcare.mvk.authentication.service.impl.MvkAuthenticationServiceImpl.authenticate call if the 
        guid parameter value matches the <fakeMatcherRegExp>. 
        If it matches the advice will return a successful Auth Result with the guid as id - if no match, the service will try the mvk 
        auth ws call as normal. So, use something like .../sso?guid=19900101-2122 to fake a login and otherwise a full mvk auth will 
        be executed -->
    <bean class="se.inera.certificate.web.security.MvkValidationServiceAdvice">
      <property name="fakeMatcherRegExp" value="[12]{1}[90]{1}[0-9]{6}-[0-9]{4}" />
    </bean>
  </beans>

  <beans>
    <security:http security="none" pattern="/welcome.jsp" />
    <security:http security="none" pattern="/" />
    <security:http security="none" pattern="/favicon.ico" />
    <security:http security="none" pattern="/web/resources/**" />
    <security:http security="none" pattern="/web/tillbaka-till-mvk" />
    <security:http security="none" pattern="/web/logga-ut" />
    <security:http security="none" pattern="/ws/**" />

    <import resource="classpath*:/netcare-mvk-integration-config.xml" />
    <import resource="classpath*:/netcare-mvk-integration-security-config.xml" />
    <import resource="classpath*:/mvk-validatetoken-cxf-config.xml" />

    <security:authentication-manager>
      <security:authentication-provider ref="preAuthAuthProvider" />
    </security:authentication-manager>

    <!-- Enable the MVK Auth filter for our mvk entry point url -->
    <security:http pattern="/web/sso**" entry-point-ref="mvkEntryPoint">
        <!-- We always clear the context before logging in -->
      <security:custom-filter position="FIRST" ref="clearSecurityContextFilter" />
      <security:custom-filter position="PRE_AUTH_FILTER" ref="mvkPreAuthFilter" />
    </security:http>

    <!-- set up protection of the needed url's in the app-->
    <security:http use-expressions="true" entry-point-ref="mvkEntryPoint">
      <security:intercept-url pattern="/api/**" access="hasRole('ROLE_CITIZEN')" />
      <security:intercept-url pattern="/moduleapi/**" access="hasRole('ROLE_CITIZEN')" />
      <security:intercept-url pattern="/web/**" access="hasRole('ROLE_CITIZEN')" />
      <security:intercept-url pattern="/m/**" access="hasRole('ROLE_CITIZEN')" />
      <security:logout logout-url="/web/logout" logout-success-url="/web/start?reason=logout" />
    </security:http>

    <!-- Filter that resets the security context -->
    <bean id="clearSecurityContextFilter" class="se.inera.certificate.web.security.ClearSecurityContextFilter">
      <property name="handler" ref="securityContextLogoutHandler" />
    </bean>

    <!--  Reuse of springs "logout" handler that clear the context -->
    <bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />

  </beans>
</beans>
